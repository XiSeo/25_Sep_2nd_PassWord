`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/08/29 19:37:51
// Design Name: 
// Module Name: testbench
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module testbench();
reg  key_change;
reg  key_read;
reg [9:0] key_input ;
reg key_delete;
reg key_enter;
reg key_restart;
reg clk_100MHz;
// 输出
    wire key_right;
    wire key_wrong;
    wire key_warn;
    wire key_change_state;
    wire key_normal_state;
    wire [2:0] key_state;

    // 实例化被测模块
    PassWord  uut (
        .key_change(key_change),
        .key_read(key_read),
        .key_input(key_input),
        .key_delete(key_delete),
        .key_enter(key_enter),
        .key_restart(key_restart),
        .clk_100MHz(clk_100MHz),
        .key_right(key_right),
        .key_wrong(key_wrong),
        .key_warn(key_warn),
        .key_change_state(key_change_state),
        .key_normal_state(key_normal_state),
        .key_state(key_state)
    );
    // 时钟生成
    initial clk_100MHz = 0;
    always #5 clk_100MHz = ~clk_100MHz;
// 按键脉冲生成任务
    task key_pulse;
        output reg key;
        begin
            key = 0;
            #1000 key = 1;  // 1us脉冲
            #2000 key = 0; // 20us低电平（仿真用）
            #1000;          // / 1us间隔
        end
    endtask
    
    // 模拟按键输入任务
    task press_key;
        input [3:0] digit;
        begin
            key_input = 0;
            case(digit)
                0: key_input = 10'b0000_0000_01;
                1: key_input = 10'b0000_0000_10;
                2: key_input = 10'b0000_0001_00;
                3: key_input = 10'b0000_0010_00;
                4: key_input = 10'b0000_0100_00;
                5: key_input = 10'b0000_1000_00;
                6: key_input = 10'b0001_0000_00;
                7: key_input = 10'b0010_0000_00;
                8: key_input = 10'b0100_0000_00;
                9: key_input = 10'b1000_0000_00;
            endcase
            key_pulse(key_read);
            #1000; // 10us间隔
        end
    endtask
    
    // 主测试流程
    initial begin
        // 初始化
        $display("Starting simulation");
        $dumpfile("password.vcd");
        $dumpvars(0, testbench);
        
        clk_100MHz = 0;
        key_change = 0;
        key_read = 0;
        key_input = 0;
        key_delete = 0;
        key_enter = 0;
        key_restart = 0;
        
        #10000;// 10us（原100ms）
        $display("[Time %0t] System initialized", $time);
        
        // 测试1: 输入正确密码 (0000)
        $display("\n[Time %0t] Test 1: Correct password (0000)", $time);
        press_key(0);
        press_key(0);
        press_key(0);
        press_key(0);
        key_pulse(key_enter);
        #100000; // 100us（原100ms）
        
        // 测试2: 输入错误密码 (1111)
        $display("\n[Time %0t] Test 2: Wrong password (1111)", $time);
        press_key(1);
        press_key(1);
        press_key(1);
        press_key(1);
        key_pulse(key_enter);
        #100000; // 100us（原100ms）
        
        // 测试3: 三次错误触发报警
        $display("\n[Time %0t] Test 3: Three wrong attempts", $time);
        repeat(2) begin
            press_key(2);
            press_key(3);
            press_key(4);
            press_key(5);
            key_pulse(key_enter);
           #100000; // 100us（原100ms）
        end
        press_key(6);
        press_key(7);
        press_key(8);
        press_key(9);
        key_pulse(key_enter);
        #100000; // 100us（原100ms）
        
        // 测试4: 管理员重启
        $display("\n[Time %0t] Test 4: Admin restart", $time);
        key_pulse(key_restart);
        #100000; // 100us（原100ms）
        
        // 测试5: 修改密码 (改为5678)
        $display("\n[Time %0t] Test 5: Change password to 5678", $time);
        key_change = 1;
        #10000000;
        press_key(5);
        press_key(6);
        press_key(7);
        press_key(8);
        key_pulse(key_enter);
        key_change = 0;
        #100000; // 100us（原100ms）
        
        // 测试6: 用新密码登录
        $display("\n[Time %0t] Test 6: Login with new password", $time);
        press_key(5);
        press_key(6);
        press_key(7);
        press_key(8);
        key_pulse(key_enter);
        #100000; // 100us（原100ms）
        
        // 测试7: 删除操作
        $display("\n[Time %0t] Test 7: Delete operation", $time);
        press_key(1);
        press_key(2);
        key_pulse(key_delete);
        press_key(3);
        key_pulse(key_delete);
        press_key(0);
        press_key(0);
        key_pulse(key_enter);
        #100000; // 100us（原100ms）
        
        // 测试8: 输入超时测试
        $display("\n[Time %0t] Test 8: Input timeout", $time);
        key_pulse(key_read);
        #10000000; // 10ms（原10秒）
        if (key_state == 0) $display("[Time %0t] Timeout: Returned to idle state", $time);
        
        // 测试9: 开锁后超时测试
        $display("\n[Time %0t] Test 9: Unlock timeout", $time);
        press_key(0);
        press_key(0);
        press_key(0);
        press_key(0);
        key_pulse(key_enter);
         #20000000; // 20ms（原20秒）
        if (key_right == 0 && key_state == 0) 
            $display("[Time %0t] Timeout: Lock auto-relocked", $time);
        
        $display("\n[Time %0t] All tests completed", $time);
        $finish;
    end
    
    // 监控输出
    always @(posedge clk_100MHz) begin
        if (key_right) $display("[Time %0t] Lock opened!", $time);
        if (key_wrong) $display("[Time %0t] Wrong password!", $time);
        if (key_warn) $display("[Time %0t] ALARM triggered!", $time);
        if (key_change_state) $display("[Time %0t] Password change mode", $time);
        if (key_normal_state) $display("[Time %0t] Normal operation mode", $time);
        if (key_state > 0) $display("[Time %0t] Input state: %0d digits entered", $time, key_state);
    end

endmodule



    
    
    
    
    

    
    
