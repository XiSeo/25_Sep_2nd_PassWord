`timescale 1ns / 1ps

module PassWord(
    input key_change,      // 进入更改密码状态
    input key_read,        // 读入密码信号
    input [9:0] key_input, // 按键输入
    input key_delete,      // 删除上一位
    input key_enter,       // 确认键
    input key_restart,     // 管理员重启
    input clk_100MHz,
    output reg key_right = 0,      // 密码正确
    output reg key_wrong = 0,      // 密码错误
    output reg key_warn = 0,       // 报警状态
    output reg key_change_state = 0, // 修改状态指示灯
    output reg key_normal_state = 0, // 正常状态指示灯
    output reg [2:0] key_state = 0  // 输入状态 (0-5)
);

    // 状态定义
    localparam IDLE      = 3'd0; // 空闲/等待状态
    localparam INPUT1    = 3'd1; // 输入第一位
    localparam INPUT2    = 3'd2; // 输入第二位
    localparam INPUT3    = 3'd3; // 输入第三位
    localparam INPUT4    = 3'd4; // 输入第四位
    localparam UNLOCKED  = 3'd5; // 开锁状态（新增状态）
    
    parameter PASSWORD_LENGTH = 4;    


    reg [3:0] stored_password [0:PASSWORD_LENGTH-1]; // 存储密码
    reg [3:0] input_password [0:PASSWORD_LENGTH-1];  // 输入密码
    
    // 初始化密码数组
    initial begin
        stored_password[0] = 4'd0;
        stored_password[1] = 4'd0;
        stored_password[2] = 4'd0;
        stored_password[3] = 4'd0;
        
        input_password[0] = 4'd0;
        input_password[1] = 4'd0;
        input_password[2] = 4'd0;
        input_password[3] = 4'd0;
    end
    
    // 按键消抖寄存器
    reg [19:0] debounce_cnt = 20'd0; // 20ms消抖计数器 (2,000,000 cycles @ 100MHz)
    reg key_read_db, key_delete_db, key_enter_db, key_restart_db, key_change_db;
    reg key_read_r = 1'b0;   // 消抖后的读信号
    reg key_delete_r = 1'b0; // 消抖后的删除信号
    reg key_enter_r = 1'b0;  // 消抖后的确认信号
    reg key_restart_r = 1'b0; // 消抖后的重启信号
    reg key_change_r = 1'b0; // 消抖后的更改密码信号
    
    // 计时器
    reg [26:0] timer_10s = 27'd0;   // 10秒计时器 (1,000,000,000 cycles)
    reg [27:0] timer_20s = 28'd0;   // 20秒计时器 (2,000,000,000 cycles)
    wire timer_10s_done = (timer_10s == 27'd999); // 仿真用：1ms超时
    wire timer_20s_done = (timer_20s == 28'd999); // 仿真用：1ms超时
    // 真实值（注释掉仿真用的值）
// wire timer_10s_done = (timer_10s == 27'd999_999_999); // 10秒超时
// wire timer_20s_done = (timer_20s == 28'd1_999_999_999); // 20秒超时

    // 错误计数器
    reg [1:0] wrong_times = 2'b0; // 0-3次错误计数
    
    // 按键编码器
    function automatic [3:0] key_encoder(input [9:0] keys);
        begin
            case(keys)
                10'b0000000001: key_encoder = 4'd0;  // 按键0
                10'b0000000010: key_encoder = 4'd1;  // 按键1
                10'b0000000100: key_encoder = 4'd2;  // 按键2
                10'b0000001000: key_encoder = 4'd3;  // 按键3
                10'b0000010000: key_encoder = 4'd4;  // 按键4
                10'b0000100000: key_encoder = 4'd5;  // 按键5
                10'b0001000000: key_encoder = 4'd6;  // 按键6
                10'b0010000000: key_encoder = 4'd7;  // 按键7
                10'b0100000000: key_encoder = 4'd8;  // 按键8
                10'b1000000000: key_encoder = 4'd9;  // 按键9
                default: key_encoder = 4'hF;         // 无效输入
            endcase
        end
    endfunction
   
    // 按键消抖处理 (20ms)
    always @(posedge clk_100MHz) begin
        // 按键采样
        key_read_db <= key_read;
        key_delete_db <= key_delete;
        key_enter_db <= key_enter;
        key_restart_db <= key_restart;
        key_change_db <= key_change;
         // if (debounce_cnt == 20'd1_999_999) begin // 20ms消抖
        // 消抖计数器
        if (debounce_cnt == 20'd1999) begin // 仿真用：20us消抖

            debounce_cnt <= 20'd0;
            
            // 更新消抖后的按键值
            key_read_r <= key_read_db;
            key_delete_r <= key_delete_db;
            key_enter_r <= key_enter_db;
            key_restart_r <= key_restart_db;
            key_change_r <= key_change_db;
        end else begin
            debounce_cnt <= debounce_cnt + 20'd1;
        end
    end
    
    // 主状态机
    always @(posedge clk_100MHz) begin
        // 状态指示灯
        key_change_state <= key_change;
        key_normal_state <= ~key_change;  // 改为按位取反
        
        // 计时器逻辑
        if ((key_state >= INPUT1) && (key_state <= INPUT4)) begin
            timer_10s <= timer_10s + 27'd1;
        end else begin
            timer_10s <= 27'd0;
        end
        
        if (key_state == UNLOCKED) begin
            timer_20s <= timer_20s + 28'd1;
        end else begin
            timer_20s <= 28'd0;
        end
        
        // 报警状态处理
        if (key_warn && key_restart_r) begin
            key_warn <= 1'b0;
            key_state <= IDLE;
            wrong_times <= 2'b0;
        end
        
        case(key_state)
            // 状态0: 空闲/等待状态
            IDLE: begin
                key_right <= 1'b0;
                key_wrong <= 1'b0;
                timer_10s <= 27'd0;
                timer_20s <= 28'd0;
                
                // 清空输入密码
                input_password[0] <= 4'd0;
                input_password[1] <= 4'd0;
                input_password[2] <= 4'd0;
                input_password[3] <= 4'd0;
                
                // 进入修改模式
                if (key_change_r) begin
                    // 清空存储密码
                    stored_password[0] <= 4'd0;
                    stored_password[1] <= 4'd0;
                    stored_password[2] <= 4'd0;
                    stored_password[3] <= 4'd0;
                    key_state <= INPUT1;
                end 
                // 开始输入密码
                else if (key_read_r) begin
                    input_password[0] <= key_encoder(key_input);
                    key_state <= INPUT1;
                end
            end
            
            // 状态1: 输入第一位
            INPUT1: begin
                if (timer_10s_done) begin
                    key_state <= IDLE; // 10秒超时
                end
                else if (key_delete_r) begin
                    key_state <= IDLE; // 删除操作
                end
                else if (key_read_r) begin
                    if (key_change) begin
                        stored_password[1] <= key_encoder(key_input);
                    end else begin
                        input_password[1] <= key_encoder(key_input);
                    end
                    key_state <= INPUT2;
                    timer_10s <= 27'd0; // 重置超时计数器
                end
            end
            
            // 状态2: 输入第二位
            INPUT2: begin
                if (timer_10s_done) begin
                    key_state <= IDLE; // 10秒超时
                end
                else if (key_delete_r) begin
                    // 删除第二位，回退到状态1
                    key_state <= INPUT1;
                    if (key_change) begin
                        stored_password[1] <= 4'd0;
                    end else begin
                        input_password[1] <= 4'd0;
                    end
                end
                else if (key_read_r) begin
                    if (key_change) begin
                        stored_password[2] <= key_encoder(key_input);
                    end else begin
                        input_password[2] <= key_encoder(key_input);
                    end
                    key_state <= INPUT3;
                    timer_10s <= 27'd0; // 重置超时计数器
                end
            end
            
            // 状态3: 输入第三位
            INPUT3: begin
                if (timer_10s_done) begin
                    key_state <= IDLE; // 10秒超时
                end
                else if (key_delete_r) begin
                    // 删除第三位，回退到状态2
                    key_state <= INPUT2;
                    if (key_change) begin
                        stored_password[2] <= 4'd0;
                    end else begin
                        input_password[2] <= 4'd0;
                    end
                end
                else if (key_read_r) begin
                    if (key_change) begin
                        stored_password[3] <= key_encoder(key_input);
                    end else begin
                        input_password[3] <= key_encoder(key_input);
                    end
                    key_state <= INPUT4;
                    timer_10s <= 27'd0; // 重置超时计数器
                end
            end
            
            // 状态4: 输入第四位
            INPUT4: begin
                if (timer_10s_done) begin
                    key_state <= IDLE; // 10秒超时
                end
                else if (key_delete_r) begin
                    // 删除第四位，回退到状态3
                    key_state <= INPUT3;
                    if (key_change) begin
                        stored_password[3] <= 4'd0;
                    end else begin
                        input_password[3] <= 4'd0;
                    end
                end
                else if (key_enter_r) begin
                    // 修改密码模式
                    if (key_change) begin
                        key_state <= IDLE; // 修改完成
                    end 
                    // 验证密码模式
                    else begin
                        // 检查密码
                        if ((input_password[0] == stored_password[0]) &&
                            (input_password[1] == stored_password[1]) &&
                            (input_password[2] == stored_password[2]) &&
                            (input_password[3] == stored_password[3])) 
                        begin
                            key_right <= 1'b1;
                            key_wrong <= 1'b0;
                            wrong_times <= 2'b0; // 重置错误计数器
                            key_state <= UNLOCKED; // 进入开锁状态
                        end else begin
                            key_right <= 1'b0;
                            key_wrong <= 1'b1;
                            wrong_times <= wrong_times + 2'b1;
                            
                            // 检查错误次数
                            if (wrong_times == 2'd2) begin // 第三次错误
                                key_warn <= 1'b1;
                                key_state <= IDLE; // 返回等待状态
                            end
                        end
                    end
                end
            end
            
            // 状态5: 开锁状态（新增）
            UNLOCKED: begin
                // 20秒超时或按下确定键返回空闲状态
                if (timer_20s_done || key_enter_r) begin
                    key_right <= 1'b0;
                    key_state <= IDLE;
                end
            end
            
            default: key_state <= IDLE;
        endcase
    end
endmodule
